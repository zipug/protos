// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v3.21.12
// source: gigachat/gigachatv1.proto

package protocol

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Перечисление возможных режимов вызовов функций.
// В зависимости от содержимого запроса, модель решает сгенерировать сообщение или вызвать функцию. Модель вызывает встроенные функции, если отсутствует массив `functions` с описанием пользовательских функций.
type FunctionCallPolicy_Mode int32

const (
	FunctionCallPolicy_undefined FunctionCallPolicy_Mode = 0
	// Если запрос содержит `"function_call": "auto"` и массив `functions` с описанием пользовательских функций, модель будет генерировать аргументы для описанных функций и не сможет вызвать встроенные функции независимо от содержимого запроса;
	FunctionCallPolicy_auto FunctionCallPolicy_Mode = 1
	// Режим работы по умолчанию. Если запрос не содержит массив функций `functions` или значение поля — `none`, GigaChat не вызовет функции, а просто сгенерирует ответ в соответствии с полученными сообщениями.
	FunctionCallPolicy_none FunctionCallPolicy_Mode = 2
)

// Enum value maps for FunctionCallPolicy_Mode.
var (
	FunctionCallPolicy_Mode_name = map[int32]string{
		0: "undefined",
		1: "auto",
		2: "none",
	}
	FunctionCallPolicy_Mode_value = map[string]int32{
		"undefined": 0,
		"auto":      1,
		"none":      2,
	}
)

func (x FunctionCallPolicy_Mode) Enum() *FunctionCallPolicy_Mode {
	p := new(FunctionCallPolicy_Mode)
	*p = x
	return p
}

func (x FunctionCallPolicy_Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FunctionCallPolicy_Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_gigachat_gigachatv1_proto_enumTypes[0].Descriptor()
}

func (FunctionCallPolicy_Mode) Type() protoreflect.EnumType {
	return &file_gigachat_gigachatv1_proto_enumTypes[0]
}

func (x FunctionCallPolicy_Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FunctionCallPolicy_Mode.Descriptor instead.
func (FunctionCallPolicy_Mode) EnumDescriptor() ([]byte, []int) {
	return file_gigachat_gigachatv1_proto_rawDescGZIP(), []int{2, 0}
}

// Сообщение, на которое ответит модель
type ChatRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Параметры сообщения
	Options *ChatOptions `protobuf:"bytes,1,opt,name=options,proto3" json:"options,omitempty"`
	// [Модель](https://developers.sber.ru/docs/ru/gigachat/models), которая будет генерировать ответ.
	Model string `protobuf:"bytes,2,opt,name=model,proto3" json:"model,omitempty"`
	// Массив сообщений. Передавайте сообщения с ролями user и assistant, чтобы сохранить контекст разговора с моделью.
	Messages      []*Message `protobuf:"bytes,3,rep,name=messages,proto3" json:"messages,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChatRequest) Reset() {
	*x = ChatRequest{}
	mi := &file_gigachat_gigachatv1_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatRequest) ProtoMessage() {}

func (x *ChatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gigachat_gigachatv1_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatRequest.ProtoReflect.Descriptor instead.
func (*ChatRequest) Descriptor() ([]byte, []int) {
	return file_gigachat_gigachatv1_proto_rawDescGZIP(), []int{0}
}

func (x *ChatRequest) GetOptions() *ChatOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *ChatRequest) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *ChatRequest) GetMessages() []*Message {
	if x != nil {
		return x.Messages
	}
	return nil
}

// Параметры запроса, которые учитываются при генерировании ответа
type ChatOptions struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// Температура выборки. Значение температуры должно быть больше ноля. Чем выше значение, тем более случайным будет ответ модели. При значениях температуры больше двух, набор токенов в ответе модели может отличаться избыточной случайностью.
	// Значение по умолчанию зависит от выбранной модели (поле `model`) и может изменяться с обновлениями модели.
	Temperature *float32 `protobuf:"fixed32,1,opt,name=temperature,proto3,oneof" json:"temperature,omitempty"`
	// *
	// Параметр используется как альтернатива температуре (поле `temperature`). Задает вероятностную массу токенов, которые должна учитывать модель.
	// Так, если передать значение 0.1, модель будет учитывать только токены, чья вероятностная масса входит в верхние 10%.
	// Значение по умолчанию зависит от выбранной модели (поле `model`) и может изменяться с обновлениями модели.
	// Значение изменяется в диапазоне от 0 до 1 включительно.
	TopP *float32 `protobuf:"fixed32,2,opt,name=top_p,json=topP,proto3,oneof" json:"top_p,omitempty"`
	// Максимальное количество токенов, которые будут использованы для создания ответов. По умолчанию используется 2048 токенов.
	MaxTokens *int32 `protobuf:"varint,4,opt,name=max_tokens,json=maxTokens,proto3,oneof" json:"max_tokens,omitempty"`
	// *
	// Количество повторений слов. Должно быть больше ноля. Возможные значения:
	// - При значении от 0 до 1 модель повторять уже использованные слова.
	// - Значение 1.0 — нейтральное значение.
	// - При значении больше 1 модель будет стараться не повторять слова.
	// Значение по умолчанию зависит от выбранной модели (поле `model`) и может изменяться с обновлениями модели.
	RepetitionPenalty *float32 `protobuf:"fixed32,5,opt,name=repetition_penalty,json=repetitionPenalty,proto3,oneof" json:"repetition_penalty,omitempty"`
	// *
	// Параметр потокового режима (`"stream": "true"`).
	// Задает минимальный интервал в секундах, который проходит между отправкой токенов.
	// Например, если указать `1`, сообщения будут приходить каждую секунду, но размер каждого из них будет больше, так как за секунду накапливается много токенов.
	// По умолчанию 0.
	UpdateInterval *float32 `protobuf:"fixed32,6,opt,name=update_interval,json=updateInterval,proto3,oneof" json:"update_interval,omitempty"`
	Flags          []string `protobuf:"bytes,7,rep,name=flags,proto3" json:"flags,omitempty"`
	// *
	// Поле, которое отвечает за то, как GigaChat будет работать с функциями.
	// Может быть строкой или объектом.
	//
	// Возможные режимы работы функций определяются в FunctionCallPolicy
	FunctionCall *FunctionCallPolicy `protobuf:"bytes,8,opt,name=function_call,json=functionCall,proto3" json:"function_call,omitempty"`
	// Массив с описанием пользовательских функций.
	Functions     []*Function `protobuf:"bytes,9,rep,name=functions,proto3" json:"functions,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChatOptions) Reset() {
	*x = ChatOptions{}
	mi := &file_gigachat_gigachatv1_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatOptions) ProtoMessage() {}

func (x *ChatOptions) ProtoReflect() protoreflect.Message {
	mi := &file_gigachat_gigachatv1_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatOptions.ProtoReflect.Descriptor instead.
func (*ChatOptions) Descriptor() ([]byte, []int) {
	return file_gigachat_gigachatv1_proto_rawDescGZIP(), []int{1}
}

func (x *ChatOptions) GetTemperature() float32 {
	if x != nil && x.Temperature != nil {
		return *x.Temperature
	}
	return 0
}

func (x *ChatOptions) GetTopP() float32 {
	if x != nil && x.TopP != nil {
		return *x.TopP
	}
	return 0
}

func (x *ChatOptions) GetMaxTokens() int32 {
	if x != nil && x.MaxTokens != nil {
		return *x.MaxTokens
	}
	return 0
}

func (x *ChatOptions) GetRepetitionPenalty() float32 {
	if x != nil && x.RepetitionPenalty != nil {
		return *x.RepetitionPenalty
	}
	return 0
}

func (x *ChatOptions) GetUpdateInterval() float32 {
	if x != nil && x.UpdateInterval != nil {
		return *x.UpdateInterval
	}
	return 0
}

func (x *ChatOptions) GetFlags() []string {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (x *ChatOptions) GetFunctionCall() *FunctionCallPolicy {
	if x != nil {
		return x.FunctionCall
	}
	return nil
}

func (x *ChatOptions) GetFunctions() []*Function {
	if x != nil {
		return x.Functions
	}
	return nil
}

// Режимы работы пользовательских функций
type FunctionCallPolicy struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Выбранный режим работы функции
	Mode          FunctionCallPolicy_Mode `protobuf:"varint,1,opt,name=mode,proto3,enum=gigachat.v1.FunctionCallPolicy_Mode" json:"mode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FunctionCallPolicy) Reset() {
	*x = FunctionCallPolicy{}
	mi := &file_gigachat_gigachatv1_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionCallPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionCallPolicy) ProtoMessage() {}

func (x *FunctionCallPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_gigachat_gigachatv1_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionCallPolicy.ProtoReflect.Descriptor instead.
func (*FunctionCallPolicy) Descriptor() ([]byte, []int) {
	return file_gigachat_gigachatv1_proto_rawDescGZIP(), []int{2}
}

func (x *FunctionCallPolicy) GetMode() FunctionCallPolicy_Mode {
	if x != nil {
		return x.Mode
	}
	return FunctionCallPolicy_undefined
}

// Описание пользовательской функции
type Function struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Название пользовательской функции, для которой будут сгенерированы аргументы
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Текстовое описание функции
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Валидный JSON-объект с набором пар ключ-значение, которые описывают аргументы функции
	Parameters string `protobuf:"bytes,3,opt,name=parameters,proto3" json:"parameters,omitempty"`
	// Массив примеров работы функции в виде объектами с парами `запрос_пользователя`-`параметры_функции`, которые будут служить модели примерами ожидаемого результата.
	FewShotExamples []*AnyExample `protobuf:"bytes,4,rep,name=few_shot_examples,json=fewShotExamples,proto3" json:"few_shot_examples,omitempty"`
	// JSON-объект с описанием параметров, которые может вернуть ваша функция
	ReturnParameters *string `protobuf:"bytes,5,opt,name=return_parameters,json=returnParameters,proto3,oneof" json:"return_parameters,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *Function) Reset() {
	*x = Function{}
	mi := &file_gigachat_gigachatv1_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Function) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Function) ProtoMessage() {}

func (x *Function) ProtoReflect() protoreflect.Message {
	mi := &file_gigachat_gigachatv1_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Function.ProtoReflect.Descriptor instead.
func (*Function) Descriptor() ([]byte, []int) {
	return file_gigachat_gigachatv1_proto_rawDescGZIP(), []int{3}
}

func (x *Function) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Function) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Function) GetParameters() string {
	if x != nil {
		return x.Parameters
	}
	return ""
}

func (x *Function) GetFewShotExamples() []*AnyExample {
	if x != nil {
		return x.FewShotExamples
	}
	return nil
}

func (x *Function) GetReturnParameters() string {
	if x != nil && x.ReturnParameters != nil {
		return *x.ReturnParameters
	}
	return ""
}

// Описание примера работы функции
type AnyExample struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Запрос пользователя
	Request string `protobuf:"bytes,1,opt,name=request,proto3" json:"request,omitempty"`
	// Массив примеров заполнения параметров пользовательской функции
	Params        *Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AnyExample) Reset() {
	*x = AnyExample{}
	mi := &file_gigachat_gigachatv1_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AnyExample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnyExample) ProtoMessage() {}

func (x *AnyExample) ProtoReflect() protoreflect.Message {
	mi := &file_gigachat_gigachatv1_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnyExample.ProtoReflect.Descriptor instead.
func (*AnyExample) Descriptor() ([]byte, []int) {
	return file_gigachat_gigachatv1_proto_rawDescGZIP(), []int{4}
}

func (x *AnyExample) GetRequest() string {
	if x != nil {
		return x.Request
	}
	return ""
}

func (x *AnyExample) GetParams() *Params {
	if x != nil {
		return x.Params
	}
	return nil
}

// Массив параметров пользовательской функции
type Params struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Параметры функции, представленные объектами с парами `название_параметра`-`значение_параметра`, которые будут служить модели примерами ожидаемого результата.
	Pairs         []*Pair `protobuf:"bytes,1,rep,name=pairs,proto3" json:"pairs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Params) Reset() {
	*x = Params{}
	mi := &file_gigachat_gigachatv1_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Params) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Params) ProtoMessage() {}

func (x *Params) ProtoReflect() protoreflect.Message {
	mi := &file_gigachat_gigachatv1_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Params.ProtoReflect.Descriptor instead.
func (*Params) Descriptor() ([]byte, []int) {
	return file_gigachat_gigachatv1_proto_rawDescGZIP(), []int{5}
}

func (x *Params) GetPairs() []*Pair {
	if x != nil {
		return x.Pairs
	}
	return nil
}

// Параметры фукнции, сгенерированные моделью в формате ключ-значение.
type Pair struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Название параметра
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Значение параметра
	Value         string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Pair) Reset() {
	*x = Pair{}
	mi := &file_gigachat_gigachatv1_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Pair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pair) ProtoMessage() {}

func (x *Pair) ProtoReflect() protoreflect.Message {
	mi := &file_gigachat_gigachatv1_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pair.ProtoReflect.Descriptor instead.
func (*Pair) Descriptor() ([]byte, []int) {
	return file_gigachat_gigachatv1_proto_rawDescGZIP(), []int{6}
}

func (x *Pair) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Pair) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Описывает сообщение, которое можно передавать в запросе
type Message struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// *
	// Роль автора сообщения:
	// - `system` — системный промпт, который задает роль модели, например, должна модель отвечать как академик или как школьник;
	// - `assistant` — ответ модели;
	// - `user` — сообщение пользователя;
	// - `function` — сообщение с результатом работы пользовательской функции. В сообщении с этой ролью передавайте в поле `content` валидный JSON-объект с результатами работы функции.
	// Для сохранения контекста диалога с пользователем передайте несколько сообщений. Подробнее читайте в разделе Работа с историей чата.
	Role string `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
	// *
	// Содержимое сообщения. Зависит от роли.
	// Если поле передается в сообщении с ролью `function`, то в нем указывается валидный JSON-объект с результатом выполнения функции.
	// В остальных случаях содержит либо системный промпт (сообщение с ролью `system`), либо текст сообщения пользователя или модели.
	Content      string        `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	FunctionCall *FunctionCall `protobuf:"bytes,5,opt,name=function_call,json=functionCall,proto3,oneof" json:"function_call,omitempty"`
	// Название функции, которое передается в сообщение с ролью `function`.
	FunctionName *string `protobuf:"bytes,6,opt,name=function_name,json=functionName,proto3,oneof" json:"function_name,omitempty"`
	// *
	// Идентификатор, который объединяет массив функций, переданных в запросе.
	// Возвращается в ответе модели (сообщение с `"role": "assistant"`) если сообщение к модели содержало функции.
	// Позволяет сохранить контекст вызова функции и повысить качество работы модели.
	// Для этого нужно передать идентификатор в запросе на генерацию в сообщении с ролью `assistant`.
	FunctionsStateId *string `protobuf:"bytes,8,opt,name=functions_state_id,json=functionsStateId,proto3,oneof" json:"functions_state_id,omitempty"`
	// *
	// Массив идентификаторов файлов, которые нужно использовать при генерации.
	//
	// Идентификатор присваивается файлу при загрузке в хранилище. Посмотреть список файлов в хранилище можно с помощью метода `GET /files`.
	//
	// В одном запросе можно передать только одно изображение. В одной сессии можно передать до 10 изображений.
	// Подробнее — в разделе Генерация с помощью файлов изображений.
	Attachments   []string `protobuf:"bytes,11,rep,name=attachments,proto3" json:"attachments,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Message) Reset() {
	*x = Message{}
	mi := &file_gigachat_gigachatv1_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_gigachat_gigachatv1_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_gigachat_gigachatv1_proto_rawDescGZIP(), []int{7}
}

func (x *Message) GetRole() string {
	if x != nil {
		return x.Role
	}
	return ""
}

func (x *Message) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Message) GetFunctionCall() *FunctionCall {
	if x != nil {
		return x.FunctionCall
	}
	return nil
}

func (x *Message) GetFunctionName() string {
	if x != nil && x.FunctionName != nil {
		return *x.FunctionName
	}
	return ""
}

func (x *Message) GetFunctionsStateId() string {
	if x != nil && x.FunctionsStateId != nil {
		return *x.FunctionsStateId
	}
	return ""
}

func (x *Message) GetAttachments() []string {
	if x != nil {
		return x.Attachments
	}
	return nil
}

// Описание ответа модели
type ChatResponse struct {
	state        protoimpl.MessageState `protogen:"open.v1"`
	Alternatives []*Alternative         `protobuf:"bytes,1,rep,name=alternatives,proto3" json:"alternatives,omitempty"`
	// Данные об использовании модели.
	Usage *Usage `protobuf:"bytes,2,opt,name=usage,proto3" json:"usage,omitempty"`
	// Данные о модели
	ModelInfo *ModelInfo `protobuf:"bytes,3,opt,name=model_info,json=modelInfo,proto3" json:"model_info,omitempty"`
	// Время ответа.
	Timestamp     int64 `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChatResponse) Reset() {
	*x = ChatResponse{}
	mi := &file_gigachat_gigachatv1_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatResponse) ProtoMessage() {}

func (x *ChatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gigachat_gigachatv1_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatResponse.ProtoReflect.Descriptor instead.
func (*ChatResponse) Descriptor() ([]byte, []int) {
	return file_gigachat_gigachatv1_proto_rawDescGZIP(), []int{8}
}

func (x *ChatResponse) GetAlternatives() []*Alternative {
	if x != nil {
		return x.Alternatives
	}
	return nil
}

func (x *ChatResponse) GetUsage() *Usage {
	if x != nil {
		return x.Usage
	}
	return nil
}

func (x *ChatResponse) GetModelInfo() *ModelInfo {
	if x != nil {
		return x.ModelInfo
	}
	return nil
}

func (x *ChatResponse) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// Сгенерированное сообщение
type Alternative struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Message       *Message               `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	FinishReason  string                 `protobuf:"bytes,2,opt,name=finish_reason,json=finishReason,proto3" json:"finish_reason,omitempty"`
	Index         int32                  `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Alternative) Reset() {
	*x = Alternative{}
	mi := &file_gigachat_gigachatv1_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Alternative) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Alternative) ProtoMessage() {}

func (x *Alternative) ProtoReflect() protoreflect.Message {
	mi := &file_gigachat_gigachatv1_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Alternative.ProtoReflect.Descriptor instead.
func (*Alternative) Descriptor() ([]byte, []int) {
	return file_gigachat_gigachatv1_proto_rawDescGZIP(), []int{9}
}

func (x *Alternative) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *Alternative) GetFinishReason() string {
	if x != nil {
		return x.FinishReason
	}
	return ""
}

func (x *Alternative) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

// Информация о количестве токенов, потраченных при генерации ответа
type Usage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Количество токенов во входящем сообщении (роль `user`)
	PromptTokens int32 `protobuf:"varint,1,opt,name=prompt_tokens,json=promptTokens,proto3" json:"prompt_tokens,omitempty"`
	// Количество токенов, сгенерированных моделью (роль `assistant`)
	CompletionTokens int32 `protobuf:"varint,2,opt,name=completion_tokens,json=completionTokens,proto3" json:"completion_tokens,omitempty"`
	// Общее количество токенов
	TotalTokens   int32 `protobuf:"varint,3,opt,name=total_tokens,json=totalTokens,proto3" json:"total_tokens,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Usage) Reset() {
	*x = Usage{}
	mi := &file_gigachat_gigachatv1_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Usage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Usage) ProtoMessage() {}

func (x *Usage) ProtoReflect() protoreflect.Message {
	mi := &file_gigachat_gigachatv1_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Usage.ProtoReflect.Descriptor instead.
func (*Usage) Descriptor() ([]byte, []int) {
	return file_gigachat_gigachatv1_proto_rawDescGZIP(), []int{10}
}

func (x *Usage) GetPromptTokens() int32 {
	if x != nil {
		return x.PromptTokens
	}
	return 0
}

func (x *Usage) GetCompletionTokens() int32 {
	if x != nil {
		return x.CompletionTokens
	}
	return 0
}

func (x *Usage) GetTotalTokens() int32 {
	if x != nil {
		return x.TotalTokens
	}
	return 0
}

// Информация о модели
type ModelInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Название модели
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Версия модели. Подробнее о версиях — в разделе Обновления моделей.
	Version       string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ModelInfo) Reset() {
	*x = ModelInfo{}
	mi := &file_gigachat_gigachatv1_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ModelInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModelInfo) ProtoMessage() {}

func (x *ModelInfo) ProtoReflect() protoreflect.Message {
	mi := &file_gigachat_gigachatv1_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModelInfo.ProtoReflect.Descriptor instead.
func (*ModelInfo) Descriptor() ([]byte, []int) {
	return file_gigachat_gigachatv1_proto_rawDescGZIP(), []int{11}
}

func (x *ModelInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ModelInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// Сгенерированный моделью вызов функции.
type FunctionCall struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Название функции
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Аргументы функции. Содержат описание в JSON-формате.
	Arguments     string `protobuf:"bytes,2,opt,name=arguments,proto3" json:"arguments,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FunctionCall) Reset() {
	*x = FunctionCall{}
	mi := &file_gigachat_gigachatv1_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FunctionCall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionCall) ProtoMessage() {}

func (x *FunctionCall) ProtoReflect() protoreflect.Message {
	mi := &file_gigachat_gigachatv1_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionCall.ProtoReflect.Descriptor instead.
func (*FunctionCall) Descriptor() ([]byte, []int) {
	return file_gigachat_gigachatv1_proto_rawDescGZIP(), []int{12}
}

func (x *FunctionCall) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FunctionCall) GetArguments() string {
	if x != nil {
		return x.Arguments
	}
	return ""
}

// Запрос списка доступных моделей
type ListModelsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListModelsRequest) Reset() {
	*x = ListModelsRequest{}
	mi := &file_gigachat_gigachatv1_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListModelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListModelsRequest) ProtoMessage() {}

func (x *ListModelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gigachat_gigachatv1_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListModelsRequest.ProtoReflect.Descriptor instead.
func (*ListModelsRequest) Descriptor() ([]byte, []int) {
	return file_gigachat_gigachatv1_proto_rawDescGZIP(), []int{13}
}

// Список с описанием доступных моделей
type ListModelsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Models        []*Model               `protobuf:"bytes,1,rep,name=models,proto3" json:"models,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListModelsResponse) Reset() {
	*x = ListModelsResponse{}
	mi := &file_gigachat_gigachatv1_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListModelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListModelsResponse) ProtoMessage() {}

func (x *ListModelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gigachat_gigachatv1_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListModelsResponse.ProtoReflect.Descriptor instead.
func (*ListModelsResponse) Descriptor() ([]byte, []int) {
	return file_gigachat_gigachatv1_proto_rawDescGZIP(), []int{14}
}

func (x *ListModelsResponse) GetModels() []*Model {
	if x != nil {
		return x.Models
	}
	return nil
}

// Описание модели
type Model struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Название модели. Описание доступных моделей смотрите в разделе Модели GigaChat.
	// При обращении к моделям в раннем доступе к названию модели нужно добавлять постфикс `-preview`. Например, `GigaChat-Pro-preview`.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Тип сущности в ответе, например, модель
	Object string `protobuf:"bytes,2,opt,name=object,proto3" json:"object,omitempty"`
	// Владелец модели
	OwnedBy string `protobuf:"bytes,3,opt,name=owned_by,json=ownedBy,proto3" json:"owned_by,omitempty"`
	// Тип модели. При запросах на генерацию передается тип chat.
	Type          string `protobuf:"bytes,8,opt,name=type,proto3" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Model) Reset() {
	*x = Model{}
	mi := &file_gigachat_gigachatv1_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Model) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Model) ProtoMessage() {}

func (x *Model) ProtoReflect() protoreflect.Message {
	mi := &file_gigachat_gigachatv1_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Model.ProtoReflect.Descriptor instead.
func (*Model) Descriptor() ([]byte, []int) {
	return file_gigachat_gigachatv1_proto_rawDescGZIP(), []int{15}
}

func (x *Model) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Model) GetObject() string {
	if x != nil {
		return x.Object
	}
	return ""
}

func (x *Model) GetOwnedBy() string {
	if x != nil {
		return x.OwnedBy
	}
	return ""
}

func (x *Model) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

// Запрос модели по конекретному имени
type RetrieveModelRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RetrieveModelRequest) Reset() {
	*x = RetrieveModelRequest{}
	mi := &file_gigachat_gigachatv1_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RetrieveModelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveModelRequest) ProtoMessage() {}

func (x *RetrieveModelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_gigachat_gigachatv1_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveModelRequest.ProtoReflect.Descriptor instead.
func (*RetrieveModelRequest) Descriptor() ([]byte, []int) {
	return file_gigachat_gigachatv1_proto_rawDescGZIP(), []int{16}
}

func (x *RetrieveModelRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type RetrieveModelResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Model         *Model                 `protobuf:"bytes,1,opt,name=model,proto3" json:"model,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RetrieveModelResponse) Reset() {
	*x = RetrieveModelResponse{}
	mi := &file_gigachat_gigachatv1_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RetrieveModelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetrieveModelResponse) ProtoMessage() {}

func (x *RetrieveModelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_gigachat_gigachatv1_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetrieveModelResponse.ProtoReflect.Descriptor instead.
func (*RetrieveModelResponse) Descriptor() ([]byte, []int) {
	return file_gigachat_gigachatv1_proto_rawDescGZIP(), []int{17}
}

func (x *RetrieveModelResponse) GetModel() *Model {
	if x != nil {
		return x.Model
	}
	return nil
}

var File_gigachat_gigachatv1_proto protoreflect.FileDescriptor

var file_gigachat_gigachatv1_proto_rawDesc = string([]byte{
	0x0a, 0x19, 0x67, 0x69, 0x67, 0x61, 0x63, 0x68, 0x61, 0x74, 0x2f, 0x67, 0x69, 0x67, 0x61, 0x63,
	0x68, 0x61, 0x74, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x67, 0x69, 0x67,
	0x61, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x22, 0x89, 0x01, 0x0a, 0x0b, 0x43, 0x68, 0x61,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x69, 0x67, 0x61,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x12, 0x30, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x69, 0x67, 0x61, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x73, 0x22, 0xbf, 0x03, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x74, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x25, 0x0a, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x65, 0x6d,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x05, 0x74,
	0x6f, 0x70, 0x5f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x48, 0x01, 0x52, 0x04, 0x74, 0x6f,
	0x70, 0x50, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x09, 0x6d, 0x61, 0x78,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x12, 0x72, 0x65, 0x70,
	0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x02, 0x48, 0x03, 0x52, 0x11, 0x72, 0x65, 0x70, 0x65, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a,
	0x0f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x48, 0x04, 0x52, 0x0e, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x66,
	0x6c, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67,
	0x73, 0x12, 0x44, 0x0a, 0x0d, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61,
	0x6c, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x69, 0x67, 0x61, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x61, 0x6c, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x33, 0x0a, 0x09, 0x66, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x67, 0x69, 0x67,
	0x61, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x74, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x74, 0x6f, 0x70, 0x5f, 0x70, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x72, 0x65, 0x70, 0x65, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x42, 0x12, 0x0a, 0x10,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x22, 0x79, 0x0a, 0x12, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x38, 0x0a, 0x04,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x67, 0x69, 0x67,
	0x61, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x4d, 0x6f, 0x64, 0x65,
	0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x22, 0x29, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0d,
	0x0a, 0x09, 0x75, 0x6e, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x10, 0x00, 0x12, 0x08, 0x0a,
	0x04, 0x61, 0x75, 0x74, 0x6f, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x10,
	0x02, 0x22, 0xed, 0x01, 0x0a, 0x08, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x43, 0x0a, 0x11, 0x66, 0x65, 0x77, 0x5f, 0x73, 0x68, 0x6f, 0x74,
	0x5f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x69, 0x67, 0x61, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6e,
	0x79, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x0f, 0x66, 0x65, 0x77, 0x53, 0x68, 0x6f,
	0x74, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x11, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x10, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x88, 0x01, 0x01, 0x42, 0x14, 0x0a, 0x12, 0x5f,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x22, 0x53, 0x0a, 0x0a, 0x41, 0x6e, 0x79, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x06, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x67, 0x69, 0x67, 0x61,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x06,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x31, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x12, 0x27, 0x0a, 0x05, 0x70, 0x61, 0x69, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x67, 0x69, 0x67, 0x61, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61,
	0x69, 0x72, 0x52, 0x05, 0x70, 0x61, 0x69, 0x72, 0x73, 0x22, 0x2e, 0x0a, 0x04, 0x50, 0x61, 0x69,
	0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xc2, 0x02, 0x0a, 0x07, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x43, 0x0a, 0x0d, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x63, 0x61, 0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x69, 0x67,
	0x61, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x66, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x0c, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02,
	0x52, 0x10, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x66, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x6c, 0x6c, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x5f,
	0x69, 0x64, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x4a, 0x04, 0x08, 0x04, 0x10, 0x05, 0x22, 0xd1,
	0x01, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3c, 0x0a, 0x0c, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x67, 0x69, 0x67, 0x61, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52,
	0x0c, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x73, 0x12, 0x28, 0x0a,
	0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67,
	0x69, 0x67, 0x61, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x05, 0x75, 0x73, 0x61, 0x67, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x69,
	0x67, 0x61, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4a, 0x04, 0x08, 0x05,
	0x10, 0x06, 0x22, 0x78, 0x0a, 0x0b, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x74, 0x69, 0x76,
	0x65, 0x12, 0x2e, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x69, 0x67, 0x61, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x82, 0x01, 0x0a,
	0x05, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x70,
	0x72, 0x6f, 0x6d, 0x70, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x4a, 0x04, 0x08, 0x04, 0x10,
	0x05, 0x22, 0x39, 0x0a, 0x09, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x40, 0x0a, 0x0c,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x13,
	0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x40, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x67, 0x69, 0x67, 0x61,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x06, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x22, 0x62, 0x0a, 0x05, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77,
	0x6e, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x77,
	0x6e, 0x65, 0x64, 0x42, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x2a, 0x0a, 0x14, 0x52, 0x65, 0x74,
	0x72, 0x69, 0x65, 0x76, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x41, 0x0a, 0x15, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76,
	0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28,
	0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x67, 0x69, 0x67, 0x61, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x32, 0x8f, 0x01, 0x0a, 0x0b, 0x43, 0x68, 0x61,
	0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x04, 0x43, 0x68, 0x61, 0x74,
	0x12, 0x18, 0x2e, 0x67, 0x69, 0x67, 0x61, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x67, 0x69, 0x67,
	0x61, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x74, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x12, 0x18, 0x2e, 0x67, 0x69, 0x67, 0x61, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e,
	0x67, 0x69, 0x67, 0x61, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01, 0x32, 0xb6, 0x01, 0x0a, 0x0d, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4d, 0x0a, 0x0a,
	0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x73, 0x12, 0x1e, 0x2e, 0x67, 0x69, 0x67,
	0x61, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x67, 0x69, 0x67,
	0x61, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x0d, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x21, 0x2e, 0x67,
	0x69, 0x67, 0x61, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69,
	0x65, 0x76, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x22, 0x2e, 0x67, 0x69, 0x67, 0x61, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x42, 0x0d, 0x5a, 0x0b, 0x2e, 0x2f, 0x3b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_gigachat_gigachatv1_proto_rawDescOnce sync.Once
	file_gigachat_gigachatv1_proto_rawDescData []byte
)

func file_gigachat_gigachatv1_proto_rawDescGZIP() []byte {
	file_gigachat_gigachatv1_proto_rawDescOnce.Do(func() {
		file_gigachat_gigachatv1_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_gigachat_gigachatv1_proto_rawDesc), len(file_gigachat_gigachatv1_proto_rawDesc)))
	})
	return file_gigachat_gigachatv1_proto_rawDescData
}

var file_gigachat_gigachatv1_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_gigachat_gigachatv1_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_gigachat_gigachatv1_proto_goTypes = []any{
	(FunctionCallPolicy_Mode)(0),  // 0: gigachat.v1.FunctionCallPolicy.Mode
	(*ChatRequest)(nil),           // 1: gigachat.v1.ChatRequest
	(*ChatOptions)(nil),           // 2: gigachat.v1.ChatOptions
	(*FunctionCallPolicy)(nil),    // 3: gigachat.v1.FunctionCallPolicy
	(*Function)(nil),              // 4: gigachat.v1.Function
	(*AnyExample)(nil),            // 5: gigachat.v1.AnyExample
	(*Params)(nil),                // 6: gigachat.v1.Params
	(*Pair)(nil),                  // 7: gigachat.v1.Pair
	(*Message)(nil),               // 8: gigachat.v1.Message
	(*ChatResponse)(nil),          // 9: gigachat.v1.ChatResponse
	(*Alternative)(nil),           // 10: gigachat.v1.Alternative
	(*Usage)(nil),                 // 11: gigachat.v1.Usage
	(*ModelInfo)(nil),             // 12: gigachat.v1.ModelInfo
	(*FunctionCall)(nil),          // 13: gigachat.v1.FunctionCall
	(*ListModelsRequest)(nil),     // 14: gigachat.v1.ListModelsRequest
	(*ListModelsResponse)(nil),    // 15: gigachat.v1.ListModelsResponse
	(*Model)(nil),                 // 16: gigachat.v1.Model
	(*RetrieveModelRequest)(nil),  // 17: gigachat.v1.RetrieveModelRequest
	(*RetrieveModelResponse)(nil), // 18: gigachat.v1.RetrieveModelResponse
}
var file_gigachat_gigachatv1_proto_depIdxs = []int32{
	2,  // 0: gigachat.v1.ChatRequest.options:type_name -> gigachat.v1.ChatOptions
	8,  // 1: gigachat.v1.ChatRequest.messages:type_name -> gigachat.v1.Message
	3,  // 2: gigachat.v1.ChatOptions.function_call:type_name -> gigachat.v1.FunctionCallPolicy
	4,  // 3: gigachat.v1.ChatOptions.functions:type_name -> gigachat.v1.Function
	0,  // 4: gigachat.v1.FunctionCallPolicy.mode:type_name -> gigachat.v1.FunctionCallPolicy.Mode
	5,  // 5: gigachat.v1.Function.few_shot_examples:type_name -> gigachat.v1.AnyExample
	6,  // 6: gigachat.v1.AnyExample.params:type_name -> gigachat.v1.Params
	7,  // 7: gigachat.v1.Params.pairs:type_name -> gigachat.v1.Pair
	13, // 8: gigachat.v1.Message.function_call:type_name -> gigachat.v1.FunctionCall
	10, // 9: gigachat.v1.ChatResponse.alternatives:type_name -> gigachat.v1.Alternative
	11, // 10: gigachat.v1.ChatResponse.usage:type_name -> gigachat.v1.Usage
	12, // 11: gigachat.v1.ChatResponse.model_info:type_name -> gigachat.v1.ModelInfo
	8,  // 12: gigachat.v1.Alternative.message:type_name -> gigachat.v1.Message
	16, // 13: gigachat.v1.ListModelsResponse.models:type_name -> gigachat.v1.Model
	16, // 14: gigachat.v1.RetrieveModelResponse.model:type_name -> gigachat.v1.Model
	1,  // 15: gigachat.v1.ChatService.Chat:input_type -> gigachat.v1.ChatRequest
	1,  // 16: gigachat.v1.ChatService.ChatStream:input_type -> gigachat.v1.ChatRequest
	14, // 17: gigachat.v1.ModelsService.ListModels:input_type -> gigachat.v1.ListModelsRequest
	17, // 18: gigachat.v1.ModelsService.RetrieveModel:input_type -> gigachat.v1.RetrieveModelRequest
	9,  // 19: gigachat.v1.ChatService.Chat:output_type -> gigachat.v1.ChatResponse
	9,  // 20: gigachat.v1.ChatService.ChatStream:output_type -> gigachat.v1.ChatResponse
	15, // 21: gigachat.v1.ModelsService.ListModels:output_type -> gigachat.v1.ListModelsResponse
	18, // 22: gigachat.v1.ModelsService.RetrieveModel:output_type -> gigachat.v1.RetrieveModelResponse
	19, // [19:23] is the sub-list for method output_type
	15, // [15:19] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_gigachat_gigachatv1_proto_init() }
func file_gigachat_gigachatv1_proto_init() {
	if File_gigachat_gigachatv1_proto != nil {
		return
	}
	file_gigachat_gigachatv1_proto_msgTypes[1].OneofWrappers = []any{}
	file_gigachat_gigachatv1_proto_msgTypes[3].OneofWrappers = []any{}
	file_gigachat_gigachatv1_proto_msgTypes[7].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_gigachat_gigachatv1_proto_rawDesc), len(file_gigachat_gigachatv1_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_gigachat_gigachatv1_proto_goTypes,
		DependencyIndexes: file_gigachat_gigachatv1_proto_depIdxs,
		EnumInfos:         file_gigachat_gigachatv1_proto_enumTypes,
		MessageInfos:      file_gigachat_gigachatv1_proto_msgTypes,
	}.Build()
	File_gigachat_gigachatv1_proto = out.File
	file_gigachat_gigachatv1_proto_goTypes = nil
	file_gigachat_gigachatv1_proto_depIdxs = nil
}
